// 1.Template String:
     // Template String এর বৈশিষ্ট্য:
     //1. ব্যাকটিক (``) দিয়ে লেখা হয়, সাধারণ ডাবল কোট বা সিঙ্গেল কোটের পরিবর্তে।
     //2. ভেরিয়েবল বা এক্সপ্রেশন যুক্ত করতে ${} ব্যবহার করা হয়।
     
     
     // ***সাধারণ স্ট্রিং (Traditional String):
     // const name = 'John';
     // const age = 25;
     // const message = 'My name is ' + name + ' and I am ' + age + ' years old.';
     // console.log(message);
     
     
     // *****টেমপ্লেট স্ট্রিং (Template String):
     // const name = 'John';
     // const age = 25;
     // const message = `My name is ${name} and I am ${age} years old.`;
     // console.log(message);
// 2.arrow function:
const getFiftyFive = () => 55;

const addSixryFive = num => num + 65;

const isEven = x => x % 2 == 0;

const addThree = (x, y, z) => x+y+z;

const doMath = (num1, num2) => {
    const sum = num1 + num2;
    return sum;
}
     // Arrow Function এর বৈশিষ্ট্য:
     // সাধারণ ফাংশন থেকে সংক্ষিপ্ত লেখা: function কীওয়ার্ডের প্রয়োজন হয় না।
     // this কিওয়ার্ড: সাধারণ ফাংশনের তুলনায় this এর ব্যবহার ভিন্নভাবে কাজ করে। এটি সেই অবজেক্টকেই ধরে রাখে যেটি ফাংশন ডিফাইন করা সময়ের মধ্যে ছিল।
    //  সাধারণ ফাংশন (Traditional Function):
    function add(a, b) {
        return a + b;
    }
    // অ্যারো ফাংশন (Arrow Function):
    const add = (a, b) => a + b;

    //     Arrow Function এর গঠন:
    // (): প্যারামিটারগুলি (যদি প্যারামিটার একাধিক থাকে)।
    // =>: এটিই অ্যারো চিহ্ন যা ফাংশনের দিক নির্দেশ করে।
    // {}: যদি ফাংশনের শরীর থাকে, তবে এটি প্রয়োজন হয়। এক লাইনের ফাংশন হলে এটি বাদ দেওয়া যায়।
//3. spread operator:





// Explanition:
// Spread Operator (...) হলো জাভাস্ক্রিপ্টের একটি শক্তিশালী ফিচার যা ES6 (ES2015) তে চালু করা হয়েছে। এটি অ্যারে এবং অবজেক্ট এর মধ্যে উপাদানগুলিকে আলাদা করতে বা ক্লোন করতে ব্যবহার করা হয়। ... এর মাধ্যমে সহজেই কোনো অ্যারের বা অবজেক্টের আইটেমগুলোকে আলাদা করা যায় এবং বিভিন্ন জায়গায় পুনরায় ব্যবহার করা যায়।
// 
// Spread Operator এর কাজ:
// 1. অ্যারের মধ্যে আইটেম "স্প্রেড" করা।
// 2. অবজেক্টের মধ্যে প্রপার্টি "স্প্রেড" করা।
// 3. অ্যারে বা অবজেক্টের কপি তৈরি করা।
// 4. অ্যারে মুঝে নতুন আইটেম যোগ করা।
// 5. অ্যারের মিশ্রণ (merge) করা।

// উদাহরণ এবং ব্যাখ্যা:
// 1. অ্যারের উপাদানগুলো স্প্রেড করা:
// অ্যারের সব উপাদানগুলোকে আলাদা করতে এবং অন্য একটি অ্যারেতে যুক্ত করতে স্প্রেড অপারেটর ব্যবহার করা হয়।
// 
// const numbers = [1, 2, 3];
// const moreNumbers = [...numbers, 4, 5, 6];
// console.log(moreNumbers); // আউটপুট: [1, 2, 3, 4, 5, 6]
// এখানে ...numbers দিয়ে মূল অ্যারে numbers এর সব আইটেমকে নতুন অ্যারে moreNumbers এ "স্প্রেড" বা ছড়িয়ে দেয়া হয়েছে, তারপর নতুন আইটেম 4, 5, 6 যুক্ত করা হয়েছে।
// 
// 2. অবজেক্টের প্রপার্টি স্প্রেড করা:
// অবজেক্টের ক্ষেত্রে ... দিয়ে একটি অবজেক্টের প্রপার্টি অন্য অবজেক্টে যোগ করা যায়।

// const person = { name: 'John', age: 30 };
// const job = { role: 'Developer', salary: 50000 };
// 
// const employee = { ...person, ...job };
// console.log(employee);
// আউটপুট: { name: 'John', age: 30, role: 'Developer', salary: 50000 }
// এখানে person এবং job অবজেক্টের সব প্রপার্টিকে নতুন employee অবজেক্টে স্প্রেড করা হয়েছে।
// 
// 3. অ্যারে বা অবজেক্ট ক্লোন করা:
// স্প্রেড অপারেটরের মাধ্যমে আমরা সহজেই কোনো অ্যারে বা অবজেক্টের ক্লোন বা কপি তৈরি করতে পারি।
// 
// অ্যারে ক্লোন:
// 
// javascript
// Copy code
// const numbers = [1, 2, 3];
// const cloneNumbers = [...numbers];
// console.log(cloneNumbers); // আউটপুট: [1, 2, 3]
// অবজেক্ট ক্লোন:
// const person = { name: 'John', age: 30 };
// const clonePerson = { ...person };
// console.log(clonePerson); // আউটপুট: { name: 'John', age: 30 }
// 4. অ্যারের মিশ্রণ (merge):
// দুটি বা ততোধিক অ্যারেকে একসাথে মিশিয়ে নতুন অ্যারে তৈরি করা যায়।
// 
// const arr1 = [1, 2, 3];
// const arr2 = [4, 5, 6];
// const mergedArray = [...arr1, ...arr2];
// console.log(mergedArray); // আউটপুট: [1, 2, 3, 4, 5, 6]
// 5. ফাংশনে আর্গুমেন্ট হিসাবে ব্যবহার করা:
// স্প্রেড অপারেটর দিয়ে অ্যারের সব উপাদানকে আলাদা আর্গুমেন্ট হিসাবে পাস করা যায়।

// function add(a, b, c) {
//   return a + b + c;
// }
// const numbers = [1, 2, 3];
// console.log(add(...numbers)); // আউটপুট: 6
// সংক্ষেপে:
// Spread Operator (...) জাভাস্ক্রিপ্টে অ্যারে বা অবজেক্টের উপাদানগুলিকে আলাদা করে বিভিন্ন কাজে ব্যবহার করা যায়। এটি প্রোগ্রামিংয়ে অনেক সুবিধা প্রদান করে, যেমন অ্যারে বা অবজেক্ট ক্লোন করা, মিশ্রণ করা, বা ফাংশনে আর্গুমেন্ট পাস করা।
// 